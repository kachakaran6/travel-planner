import React from 'react';
import { Outlet, Link, useNavigate } from 'react-router-dom';
import { Map, PackageSearch, Calendar, Wallet, LogOut, Home, Pin, Bus } from 'lucide-react';
import { useAuth } from '@/contexts/auth-context';
import { Button } from './ui/button';

export function Layout() {
  const { user, signOut } = useAuth();
  const navigate = useNavigate();

  const handleSignOut = async () => {
    await signOut();
    navigate('/login');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <Link to="/" className="text-xl font-bold text-blue-600">
              TravelPlanner
            </Link>
            
            <div className="flex items-center space-x-4">
              <div className="relative">
                <button
                  className="flex justify-center w-8 h-8 bg-gray-200 rounded-full"
                  onClick={() => {
                    const menu = document.getElementById('menu');
                    menu?.classList.toggle('hidden');
                  }}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M4 6h16M4 12h16M4 18h16"
                    />
                  </svg>
                </button>
                <div
                  id="menu"
                  className="hidden absolute right-0 bg-white shadow-md p-4 w-48"
 >
                  <Link to="/trips" className="block px-4 py-2 text-gray-700 hover:bg-gray-100">Trips</Link>
                  <Link to="/packing" className="block px-4 py-2 text-gray-700 hover:bg-gray-100">Packing</Link>
                  <Link to="/expenses" className="block px-4 py-2 text-gray-700 hover:bg-gray-100">Expenses</Link>
                  <Link to="/places" className="block px-4 py-2 text-gray-700 hover:bg-gray-100">Places</Link>
                  <Link to="/accommodation" className="block px-4 py-2 text-gray-700 hover:bg-gray-100">Accommodation</Link>
                  <button onClick={handleSignOut} className="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100">Logout</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>
      <main className="container mx-auto p-4">
        <Outlet />
      </main>
    </div>
  );
}


------------------------DATE PICKER
            <div>
              <label>Departure Date and Time:</label>
              <DatePicker
                selected={newDepartureTime}
                onChange={(date: Date) => setNewDepartureTime(date.toISOString())}
                showTimeSelect
                timeFormat="HH:mm"
                timeIntervals={15}
                dateFormat="yyyy-MM-dd HH:mm"
                className="p-2 border rounded w-full"
                wrapperClassName="flex flex-col"
                calendarClassName="w-full"
              />
            </div>
            <div>
              <label>Arrival Date and Time:</label>
              <DatePicker
                selected={newArrivalTime}
                onChange={(date: Date) => setNewArrivalTime(date.toISOString())}
                showTimeSelect
                timeFormat="HH:mm"
                timeIntervals={15}
                dateFormat="yyyy-MM-dd HH:mm"
                className="p-2 border rounded"
              />
            </div>
--------------------------------------------------------------------

className={`absolute right-0 bg-white shadow-md p-4 w-48 ${isMenuOpen ? '' : 'hidden'}`} // Update this line


----------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
// import { supabase } from '@/lib/supabase';
import { supabase } from "@/lib/supabase";
import { useParams } from "react-router-dom";

interface Trip {
  id: string;
  title: string;
  description: string;
  start_date: string;
  end_date: string;
  budget: number;
  status: string;
  created_at: string;
  updated_at: string;
}

interface TripDetailsProps {
    trip: Trip;
  }

  const TripDetails: React.FC<TripDetailsProps> = ({ trip }) => {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="font-bold mb-2">Trip: {trip.title}</h3>
        <p className="text-gray-600">Description:{trip.description}</p>
        <p className="text-gray-600">Start Date: {trip.start_date}</p>
        <p className="text-gray-600">End Date: {trip.end_date}</p>
        <p className="text-gray-600">Budget: {trip.budget}</p>
        <p className="text-gray-600">Status: {trip.status}</p>
      </div>
    );
  };


  ------------------------------------------------------------------------------------------

  // const TripDetails: React.FC = () => {
//   const [trip, setTrip] = useState<Trip | null>(null);
//   const [isEditing, setIsEditing] = useState(false);

//   useEffect(() => {
//     const fetchTrip = async () => {
//       const { data, error } = await supabase
//         .from('trips')
//         .select('*')
//         .eq('id', 'your_trip_id'); // Replace with the ID of the trip you want to view

//       if (error) {
//         console.error('Error fetching trip:', error);
//       } else {
//         console.log('Trip fetched:', data);
//         setTrip(data[0]);
//       }
//     };

//     fetchTrip();
//   }, []);

//   const handleEdit = () => {
//     setIsEditing(true);
//   };

//   const handleSave = async () => {
//     if (!trip) return;

//     const { data, error } = await supabase
//       .from('trips')
//       .update({
//         title: trip.title,
//         description: trip.description,
//         start_date: trip.start_date,
//         end_date: trip.end_date,
//         budget: trip.budget,
//         status: trip.status,
//       })
//       .eq('id', trip.id);

//     if (error) {
//       console.error('Error updating trip:', error);
//     } else {
//       console.log('Trip updated:', data);
//       setIsEditing(false);
//     }
//   };


//   return (
//     <div>
//       {trip && (
//         <div>
//           <h2>{trip.title}</h2>
//           <p>{trip.description}</p>
//           <p>Start Date: {trip.start_date}</p>
//           <p>End Date: {trip.end_date}</p>
//           <p>Budget: {trip.budget}</p>
//           <p>Status: {trip.status}</p>

//           {isEditing ? (
//             <div>
//               <input
//                 type="text"
//                 value={trip.title}
//                 onChange={(e) => setTrip({ ...trip, title: e.target.value })}
//               />
//               <textarea
//                 value={trip.description}
//                 onChange={(e) => setTrip({ ...trip, description: e.target.value })}
//               />
//               <input
//                 type="date"
//                 value={trip.start_date}
//                 onChange={(e) => setTrip({ ...trip, start_date: e.target.value })}
//               />
//               <input
//                 type="date"
//                 value={trip.end_date}
//                 onChange={(e) => setTrip({ ...trip, end_date: e.target.value })}
//               />
//               <input
//                 type="number"
//                 value={trip.budget}
//                 onChange={(e) => setTrip({ ...trip, budget: parseInt(e.target.value) })}
//               />
//               <select
//                 value={trip.status}
//                 onChange={(e) => setTrip({ ...trip, status: e.target.value })}
//               >
//                 <option value="planning">Planning</option>
//                 <option value="ongoing">Ongoing</option>
//                 <option value="completed">Completed</option>
//               </select>
//               <button onClick={handleSave}>Save</button>
//             </div>
//           ) : (
//             <button onClick={handleEdit}>Edit</button>
//           )}
//         </div>
//       )}
//     </div>
//   );
// };
-----------------------------------------------------------------------

import React, { useState, useEffect } from "react";
import { supabase } from "@/lib/supabase";
import { useParams } from "react-router-dom";

interface Trip {
  id: string;
  title: string;
  start_date: string;
  end_date: string;
  status: string;
}

interface Itinerary {
  id: string;
  trip_id: string;
  date: string;
  activity: string;
}

interface PackingItem {
  id: string;
  trip_id: string;
  item: string;
  category: string;
  is_packed: boolean;
}

interface Accommodation {
  id: string;
  trip_id: string;
  name: string;
  check_in: string;
  check_out: string;
  booking_ref: string;
}

interface Transport {
  id: string;
  trip_id: string;
  departure_location: string;
  arrival_location: string;
  departure_time: string;
  arrival_time: string;
  booking_ref: string;
}

const TripDetails: React.FC = () => {
  const { id } = useParams();
  const [trip, setTrip] = useState<Trip | null>(null);
  const [itineraries, setItineraries] = useState<Itinerary[]>([]);
  const [packingItems, setPackingItems] = useState<PackingItem[]>([]);
  const [accommodations, setAccommodations] = useState<Accommodation[]>([]);
  const [transports, setTransports] = useState<Transport[]>([]);

  useEffect(() => {
    const fetchTrip = async () => {
      const { data, error } = await supabase
        .from("trips")
        .select("*")
        .eq("id", id)
        .single();

      if (error) {
        console.error("Error fetching trip details:", error);
      } else {
        setTrip(data);
      }
    };

    fetchTrip();
  }, [id]);

  useEffect(() => {
    const fetchItineraries = async () => {
      const { data, error } = await supabase
        .from("itineraries")
        .select("*")
        .eq("trip_id", id);

      if (error) {
        console.error("Error fetching itineraries:", error);
      } else {
        setItineraries(data || []);
      }
    };

    fetchItineraries();
  }, [id]);

  useEffect(() => {
    const fetchPackingItems = async () => {
      const { data, error } = await supabase
        .from("packing_items")
        .select("*")
        .eq("trip_id", id);

      if (error) {
        console.error("Error fetching packing items:", error);
      } else {
        setPackingItems(data || []);
      }
    };

    fetchPackingItems();
  }, [id]);

  useEffect(() => {
    const fetchAccommodations = async () => {
      const { data, error } = await supabase
        .from("accommodations")
        .select("*")
        .eq("trip_id", id);

      if (error) {
        console.error("Error fetching accommodations:", error);
      } else {
        setAccommodations(data || []);
      }
    };

    fetchAccommodations();
  }, [id]);

  useEffect(() => {
    const fetchTransports = async () => {
      const { data, error } = await supabase
        .from("transport")
        .select("*")
        .eq("trip_id", id);

      if (error) {
        console.error("Error fetching transports:", error);
      } else {
        setTransports(data || []);
      }
    };

    fetchTransports();
  }, [id]);

  const handleDeleteTrip = async () => {
    if (window.confirm("Are you sure you want to delete this trip?")) {
      try {
        // Delete trip
        const { data, error } = await supabase
          .from("trips")
          .delete()
          .eq("id", id);

        if (error) {
          console.error("Error deleting trip:", error);
        } else {
          console.log("Trip deleted:", data);
        }

        // Delete itineraries
        const { data: itineraryData, error: itineraryError } = await supabase
          .from("itineraries")
          .delete()
          .eq("trip_id", id);

        if (itineraryError) {
          console.error("Error deleting itineraries:", itineraryError);
        } else {
          console.log("Itineraries deleted:", itineraryData);
        }

        // Delete packing items
        const { data: packingData, error: packingError } = await supabase
          .from("packing_items")
          .delete()
          .eq("trip_id", id );

        if (packingError) {
          console.error("Error deleting packing items:", packingError);
        } else {
          console.log("Packing items deleted:", packingData);
        }

        // Delete accommodations
        const { data: accommodationData, error: accommodationError } = await supabase
          .from("accommodations")
          .delete()
          .eq("trip_id", id);

        if (accommodationError) {
          console.error("Error deleting accommodations:", accommodationError);
        } else {
          console.log("Accommodations deleted:", accommodationData);
        }

        // Delete transports
        const { data: transportData, error: transportError } = await supabase
          .from("transport")
          .delete()
          .eq("trip_id", id);

        if (transportError) {
          console.error("Error deleting transports:", transportError);
        } else {
          console.log("Transports deleted:", transportData);
        }

        // Redirect to trips page
        window.location.href = "/trips";
      } catch (err) {
        console.error("Unexpected error:", err);
      }
    }
  };

  if (!trip) {
    return <div>Loading...</div>;
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="font-bold mb-2">Trip: {trip.title}</h3>
      <p className="text-gray-600">Start Date: {new Date(trip.start_date).toLocaleDateString()}</p>
      <p className="text-gray-600">End Date: {new Date(trip.end_date).toLocaleDateString()}</p>
      <p className="text-gray-600">Status: {trip.status}</p>
      <button
        className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-4"
        onClick={handleDeleteTrip}
      >
        Delete Trip
      </button>

      <h4 className="font-bold mb-2 mt-6">Itineraries</h4>
      <ul>
        {itineraries.map((itinerary) => (
          <li key={itinerary.id}>{itinerary.activity} on {new Date(itinerary.date).toLocaleDateString()}</li>
        ))}
      </ul>

      <h4 className="font-bold mb-2 mt-6">Packing Items</h4>
      <ul>
        {packingItems.map((item) => (
          <li key={item.id}>{item.item} - {item.is_packed ? "Packed" : "Not Packed"}</li>
        ))}
      </ul>

      <h4 className="font-bold mb-2 mt-6">Accommodations</h4>
      <ul>
        {accommodations.map((accommodation) => (
          <li key={accommodation.id}>
            {accommodation.name} (Check-in: {new Date(accommodation.check_in).toLocaleDateString()}, Check-out: {new Date(accommodation.check_out).toLocaleDateString()})
          </li>
        ))}
      </ul>

      <h4 className="font-bold mb-2 mt-6">Transport</h4>
      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr>
            <th className="border border-gray-300 p-2">Departure Location</th>
            <th className="border border-gray-300 p-2">Arrival Location</th>
            <th className="border border-gray-300 p-2">Departure Time</th>
            <th className="border border-gray-300 p-2">Arrival Time</th>
            <th className="border border-gray-300 p-2">Booking Ref</th>
          </tr>
        </thead>
        <tbody>
          {transports.map((transport) => (
            <tr key={transport.id}>
              <td className="border border-gray-300 p-2">{transport.departure_location}</td>
              <td className="border border-gray-300 p-2">{transport.arrival_location}</td>
              <td className="border border-gray-300 p-2">{new Date(transport.departure_time).toLocaleString()}</td>
              <td className="border border-gray-300 p-2">{new Date(transport.arrival_time).toLocaleString()}</td>
              <td className="border border-gray-300 p-2">{transport.booking_ref}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TripDetails;